name: Build Cromite

on:
  workflow_dispatch:
    inputs:
      sha:
        description: 'li001test/cromite SHA to build. Defaults to the commit that triggered the workflow.'
        required: false
        default: ''
      build:
        description: 'android arch [arm/arm64/all]'
        required: true
        default: 'all'
      debug:
        description: 'debug? [true/false]'
        required: true
        default: 'false'
      clangd:
        description: 'clangd? [true/false]'
        required: true
        default: 'false'

env:
  CROMITE_SHA: ${{ github.event.inputs.sha || github.sha }}

jobs:
  check_images:
    runs-on: ddepot-ubuntu-24.04-64
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          repository: li001test/cromite
          path: cromite
          ref: ${{ env.CROMITE_SHA }}
          fetch-depth: 1

      - name: Get current chromium version
        shell: bash
        run: |
          export VERSION=$( cat ./cromite/build/RELEASE )

          echo Current version is $VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          cd cromite/tools

      - name: Building build-deps container ${{ env.VERSION }}
        shell: bash
        run: |
          docker pull uazo/build-deps:$VERSION || \
            DOCKER_BUILDKIT=1 docker build -t uazo/build-deps:$VERSION \
              --progress plain \
              --build-arg VERSION=$VERSION \
              --build-arg HTTP_PROXY="$PROXY_ADDR" \
              --no-cache \
              cromite/tools/images/build-deps/.

      - name: Building chromium container ${{ env.VERSION }}
        shell: bash
        run: |
          docker pull uazo/chromium:$VERSION || \
            DOCKER_BUILDKIT=1 docker build -t uazo/chromium:$VERSION \
              --progress plain \
              --build-arg VERSION=$VERSION \
              --build-arg HTTP_PROXY="$PROXY_ADDR" \
              cromite/tools/images/chr-source/.

      - name: Building cromite container ${{ env.VERSION }}-${{ env.CROMITE_SHA }}
        shell: bash
        run: |
          docker pull li001test/cromite:$VERSION-$CROMITE_SHA || \
            DOCKER_BUILDKIT=1 docker build -t li001test/cromite:$VERSION-$CROMITE_SHA --progress plain \
              --build-arg CROMITE_SHA=$CROMITE_SHA \
              --build-arg VERSION=$VERSION \
              --build-arg HTTP_PROXY="$PROXY_ADDR" \
              cromite/tools/images/cromite-source/.

      - name: Building cromite-build container ${{ env.VERSION }}-${{ env.CROMITE_SHA }}
        shell: bash
        run: |
          docker pull li001test/cromite-build:$VERSION-$CROMITE_SHA || \
            DOCKER_BUILDKIT=1 docker build -t li001test/cromite-build:$VERSION-$CROMITE_SHA --progress plain \
              --build-arg CROMITE_SHA=$CROMITE_SHA \
              --build-arg VERSION=$VERSION \
              --build-arg HTTP_PROXY="$PROXY_ADDR" \
              --no-cache \
              cromite/tools/images/cromite-build/.

      - name: Mark image to build
        shell: bash
        run: |
          docker rmi li001test/cromite-build:build || true
          docker tag li001test/cromite-build:$VERSION-$CROMITE_SHA li001test/cromite-build:build

  build_arm64:
    runs-on: depot-ubuntu-24.04-64
    needs: check_images
    if: success() && (github.event.inputs.build == 'arm64' || github.event.inputs.build == 'all')
    timeout-minutes: 1440

    container:
      image: li001test/cromite-build:build
      env:
        WORKSPACE: /home/lg/working_dir
        # compile in debug mode
        TARGET_ISDEBUG: ${{ github.event.inputs.debug }}
        USE_KEYSTORE: true
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        CROMITE_PREF_HASH_SEED_BIN: ${{ secrets.CROMITE_PREF_HASH_SEED_BIN }}

    steps:
      - name: Prepare Build Container
        shell: bash
        run: |
          PATH=$WORKSPACE/chromium/src/third_party/llvm-build/Release+Asserts/bin:$WORKSPACE/depot_tools/:/usr/local/go/bin:$WORKSPACE/mtool/bin:$PATH
          cd $WORKSPACE

          # set out folder permissions
          sudo mkdir -p chromium/src/out/arm64 && \
            sudo chown lg chromium/src/out &&
            sudo chown lg chromium/src/out/arm64

          sudo mkdir -p /run/user/1000/
          sudo chown lg /run/user/1000/
          sudo chmod g-rxw /run/user/1000/
          sudo chmod o-rxw /run/user/1000/

          # prepare keystore
          echo "::group::-------- prepare keystore"
          cd $WORKSPACE
          echo "${{ secrets.KEYSTORE }}" > cromite.keystore.asc
          gpg --homedir ./ -d --passphrase "${{ secrets.KEYSTORE_PASSPHRASE }}" --batch cromite.keystore.asc > cromite.keystore
          echo "::endgroup::"

          # bootstrap python3 for gn
          echo ../../../../../usr/bin >$WORKSPACE/depot_tools/python3_bin_reldir.txt

      - name: Build Cromite Android arm64
        shell: bash
        run: |
          PATH=$WORKSPACE/chromium/src/third_party/llvm-build/Release+Asserts/bin:$WORKSPACE/depot_tools/:/usr/local/go/bin:$WORKSPACE/mtool/bin:$PATH
          cd $WORKSPACE/chromium/src

          echo "::group::-------- gn gen"
          GN_ARGS="target_os = \"android\" $(cat /home/lg/working_dir/cromite/build/cromite.gn_args) target_cpu = \"arm64\""
          if [[ "${{ github.event.inputs.clangd }}" == "true" ]]; then
            GN_ARGS="$GN_ARGS export_compile_commands=true"
          fi
          gn gen --args="$GN_ARGS" out/arm64
          echo "::endgroup::"

          echo "::group::-------- gn args"
          gn args out/arm64/ --list --short
          gn args out/arm64/ --list >out/arm64/gn_list
          echo "::endgroup::"

          ninja -C out/arm64 chrome_public_bundle
          ninja -C out/arm64 chrome_public_apk

          cp ../../cromite/build/RELEASE out/arm64

      - name: Get ninja logs Android arm64
        if: always()
        shell: bash
        run: |
          cd $WORKSPACE
          $WORKSPACE/ninjatracing/ninjatracing -a $WORKSPACE/chromium/src/out/arm64/.ninja_log >$WORKSPACE/chromium/src/out/arm64/ninja_log_trace.json
          python3 $WORKSPACE/chromium/src/third_party/catapult/tracing/bin/trace2html $WORKSPACE/chromium/src/out/arm64/ninja_log_trace.json

      - name: Generate breakpad symbols for Android arm64
        shell: bash
        run: |
          PATH=$WORKSPACE/chromium/src/third_party/llvm-build/Release+Asserts/bin:$WORKSPACE/depot_tools/:/usr/local/go/bin:$WORKSPACE/mtool/bin:$PATH
          cd $WORKSPACE/chromium/src

          echo "::group::-------- generating breakpad symbols"
          ninja -C out/arm64 minidump_stackwalk dump_syms
          components/crash/content/tools/generate_breakpad_symbols.py --build-dir=out/arm64 \
             --symbols-dir=out/arm64/symbols/ --binary=out/arm64/lib.unstripped/libchrome.so \
             --platform=android --clear --verbose
          cp out/arm64/lib.unstripped/libchrome.so out/arm64/symbols/libchrome.lib.so
          cp out/arm64/minidump_stackwalk out/arm64/symbols
          cp out/arm64/dump_syms out/arm64/symbols
          echo "::endgroup::"

      - name: Generate Supersize data for Android arm64
        if: ${{ github.event.inputs.debug == 'false' }}
        shell: bash
        run: |
          PATH=$WORKSPACE/chromium/src/third_party/llvm-build/Release+Asserts/bin:$WORKSPACE/depot_tools/:/usr/local/go/bin:$WORKSPACE/mtool/bin:$PATH
          cd $WORKSPACE/chromium/src

          tools/binary_size/supersize archive out/arm64/chrome.size --apk-file out/arm64/apks/ChromePublic.apk -v

      - name: Generate clangd index for Android arm64
        if: ${{ github.event.inputs.clangd == 'true' }}
        shell: bash
        run: |
          PATH=$WORKSPACE/chromium/src/third_party/llvm-build/Release+Asserts/bin:$WORKSPACE/depot_tools/:/usr/local/go/bin:$WORKSPACE/mtool/bin:$PATH
          cd $WORKSPACE/chromium/src
          echo "::group::-------- generating clangd index"
          /home/lg/working_dir/clangd_snapshot_20250518/bin/clangd-indexer --executor=all-TUs out/arm64/compile_commands.json >out/arm64/cromite.idx
          echo "::endgroup::"

      - name: Upload artifact Android arm64
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cromite-android-arm64
          if-no-files-found: ignore
          path: |
            /home/lg/working_dir/chromium/src/out/arm64/apks/ChromePublic.apk
            /home/lg/working_dir/chromium/src/out/arm64/chrome.size
            /home/lg/working_dir/chromium/src/out/arm64/gn_list
            /home/lg/working_dir/chromium/src/out/arm64/ninja_log_trace.html
            /home/lg/working_dir/chromium/src/out/arm64/symbols/
            /home/lg/working_dir/chromium/src/out/arm64/cromite.idx
            /home/lg/working_dir/chromium/src/out/arm64/RELEASE

  build_arm:
    runs-on: depot-ubuntu-24.04-64
    needs: check_images
    if: success() && (github.event.inputs.build == 'arm' || github.event.inputs.build == 'all')
    timeout-minutes: 1440

    container:
      image: li001test/cromite-build:build
      env:
        WORKSPACE: /home/lg/working_dir
        # compile in debug mode
        TARGET_ISDEBUG: ${{ github.event.inputs.debug }}
        USE_KEYSTORE: true
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        CROMITE_PREF_HASH_SEED_BIN: ${{ secrets.CROMITE_PREF_HASH_SEED_BIN }}

    steps:
      - name: Prepare Build Container
        shell: bash
        run: |
          PATH=$WORKSPACE/chromium/src/third_party/llvm-build/Release+Asserts/bin:$WORKSPACE/depot_tools/:/usr/local/go/bin:$WORKSPACE/mtool/bin:$PATH
          cd $WORKSPACE

          # set out folder permissions
          sudo mkdir -p chromium/src/out/arm && \
            sudo chown lg chromium/src/out &&
            sudo chown lg chromium/src/out/arm

          sudo mkdir -p /run/user/1000/
          sudo chown lg /run/user/1000/
          sudo chmod g-rxw /run/user/1000/
          sudo chmod o-rxw /run/user/1000/

          # prepare keystore
          echo "::group::-------- prepare keystore"
          cd $WORKSPACE
          echo "${{ secrets.KEYSTORE }}" > cromite.keystore.asc
          gpg --homedir ./ -d --passphrase "${{ secrets.KEYSTORE_PASSPHRASE }}" --batch cromite.keystore.asc > cromite.keystore
          echo "::endgroup::"

          # bootstrap python3 for gn
          echo ../../../../../usr/bin >$WORKSPACE/depot_tools/python3_bin_reldir.txt

      - name: Build Cromite Android arm
        shell: bash
        run: |
          PATH=$WORKSPACE/chromium/src/third_party/llvm-build/Release+Asserts/bin:$WORKSPACE/depot_tools/:/usr/local/go/bin:$WORKSPACE/mtool/bin:$PATH
          cd $WORKSPACE/chromium/src

          echo "::group::-------- gn gen"
          gn gen --args="target_os = \"android\" $(cat /home/lg/working_dir/cromite/build/cromite.gn_args) target_cpu = \"arm\" " out/arm
          echo "::endgroup::"

          echo "::group::-------- gn args"
          gn args out/arm/ --list --short
          gn args out/arm/ --list >out/arm/gn_list
          echo "::endgroup::"

          ninja -C out/arm chrome_public_bundle
          ninja -C out/arm chrome_public_apk

          cp ../../cromite/build/RELEASE out/arm

      - name: Get ninja logs Android arm
        if: always()
        shell: bash
        run: |
          cd $WORKSPACE
          $WORKSPACE/ninjatracing/ninjatracing -a $WORKSPACE/chromium/src/out/arm/.ninja_log >$WORKSPACE/chromium/src/out/arm/ninja_log_trace.json
          python3 $WORKSPACE/chromium/src/third_party/catapult/tracing/bin/trace2html $WORKSPACE/chromium/src/out/arm/ninja_log_trace.json

      - name: Upload artifact Android arm
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cromite-android-arm
          if-no-files-found: ignore
          path: |
            /home/lg/working_dir/chromium/src/out/arm/apks/ChromePublic.apk
            /home/lg/working_dir/chromium/src/out/arm/gn_list
            /home/lg/working_dir/chromium/src/out/arm/ninja_log_trace.html
            /home/lg/working_dir/chromium/src/out/arm/RELEASE
